const __vite__mapDeps=(e,t=__vite__mapDeps,i=t.f||(t.f=["_astro/index.ChiczSqJ.js","_astro/_commonjsHelpers.C4iS2aBk.js"]))=>e.map((e=>i[e])),N="modulepreload",x=function(e){return"/"+e},b={},R=function(e,t,i){let r=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const e=document.querySelector("meta[property=csp-nonce]"),i=e?.nonce||e?.getAttribute("nonce");r=Promise.all(t.map((e=>{if((e=x(e))in b)return;b[e]=!0;const t=e.endsWith(".css"),r=t?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${e}"]${r}`))return;const n=document.createElement("link");return n.rel=t?"stylesheet":N,t||(n.as="script",n.crossOrigin=""),n.href=e,i&&n.setAttribute("nonce",i),document.head.appendChild(n),t?new Promise(((t,i)=>{n.addEventListener("load",t),n.addEventListener("error",(()=>i(new Error(`Unable to preload CSS for ${e}`))))})):void 0})))}return r.then((()=>e())).catch((e=>{const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=e,window.dispatchEvent(t),!t.defaultPrevented)throw e}))},ee={name:"MissingMediaQueryDirective",title:"Missing value for `client:media` directive.",message:'Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided'},te={name:"NoMatchingRenderer",title:"No matching renderer found.",message:(e,t,i,r)=>`Unable to render \`${e}\`.\n\n${r>0?`There ${i?"are":"is"} ${r} renderer${i?"s":""} configured in your \`astro.config.mjs\` file,\nbut ${i?"none were":"it was not"} able to server-side render \`${e}\`.`:"No valid renderer was found "+(t?`for the \`.${t}\` file extension.`:"for this file extension.")}`,hint:e=>`Did you mean to enable the ${e} integration?\n\nSee https://docs.astro.build/en/guides/framework-components/ for more information on how to install and configure integrations.`},re={name:"NoClientEntrypoint",title:"No client entrypoint specified in renderer.",message:(e,t,i)=>`\`${e}\` component has a \`client:${t}\` directive, but no client entrypoint was provided by \`${i}\`.`,hint:"See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer."},ie={name:"NoClientOnlyHint",title:"Missing hint on client:only directive.",message:e=>`Unable to render \`${e}\`. When using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.`,hint:e=>`Did you mean to pass \`client:only="${e}"\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`},ne={name:"NoMatchingImport",title:"No import found for component.",message:e=>`Could not render \`${e}\`. No matching import has been found for \`${e}\`.`,hint:"Please make sure the component is properly imported."},se={name:"InvalidComponentArgs",title:"Invalid component arguments.",message:e=>`Invalid arguments passed to${e?` <${e}>`:""} component.`,hint:"Astro components cannot be rendered directly via function call, such as `Component()` or `{items.map(Component)}`."},ae={name:"ImageMissingAlt",title:'Image missing required "alt" property.',message:'Image missing "alt" property. "alt" text is required to describe important images on the page.',hint:'Use an empty string ("") for decorative images.'},oe={name:"InvalidImageService",title:"Error while loading image service.",message:"There was an error loading the configured image service. Please see the stack trace for more information."},v={name:"MissingImageDimension",title:"Missing image dimensions",message:(e,t)=>`Missing ${"both"===e?"width and height attributes":`${e} attribute`} for ${t}. When using remote images, both dimensions are required unless in order to avoid CLS.`,hint:"If your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](https://docs.astro.build/en/guides/imports/#other-assets). You can also use `inferSize={true}` for remote images to get the original dimensions."},ce={name:"FailedToFetchRemoteImageDimensions",title:"Failed to retrieve remote image dimensions",message:e=>`Failed to get the dimensions for ${e}.`,hint:"Verify your remote image URL is accurate, and that you are not using `inferSize` with a file located in your `public/` folder."},I={name:"UnsupportedImageFormat",title:"Unsupported image format",message:(e,t,i)=>`Received unsupported format \`${e}\` from \`${t}\`. Currently only ${i.join(", ")} are supported by our image services.`,hint:"Using an `img` tag directly instead of the `Image` component might be what you're looking for."},T={name:"UnsupportedImageConversion",title:"Unsupported image conversion",message:"Converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images is not currently supported."},S={name:"ExpectedImage",title:"Expected src to be an image.",message:(e,t,i)=>`Expected \`src\` property for \`getImage\` or \`<Image />\` to be either an ESM imported image or a string with the path of a remote image. Received \`${e}\` (type: \`${t}\`).\n\nFull serialized options received: \`${i}\`.`,hint:"This error can often happen because of a wrong path. Make sure the path to your image is correct. If you're passing an async function, make sure to call and await it."},me={name:"ExpectedImageOptions",title:"Expected image options.",message:e=>`Expected getImage() parameter to be an object. Received \`${e}\`.`},le={name:"ExpectedNotESMImage",title:"Expected image options, not an ESM-imported image.",message:"An ESM-imported image cannot be passed directly to `getImage()`. Instead, pass an object with the image in the `src` property.",hint:"Try changing `getImage(myImage)` to `getImage({ src: myImage })`"},P={name:"IncompatibleDescriptorOptions",title:"Cannot set both `densities` and `widths`",message:"Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.",hint:"Those attributes are used to construct a `srcset` attribute, which cannot have both `x` and `w` descriptors."},de={name:"NoImageMetadata",title:"Could not process image metadata.",message:e=>`Could not process image metadata${e?` for \`${e}\``:""}.`,hint:"This is often caused by a corrupted or malformed image. Re-exporting the image from your image editor may fix this issue."},$={name:"LocalImageUsedWrongly",title:"Local images must be imported.",message:e=>`\`Image\`'s and \`getImage\`'s \`src\` parameter must be an imported image or an URL, it cannot be a string filepath. Received \`${e}\`.`,hint:"If you want to use an image from your `src` folder, you need to either import it or if the image is coming from a content collection, use the [image() schema helper](https://docs.astro.build/en/guides/images/#images-in-content-collections). See https://docs.astro.build/en/guides/images/#src-required for more information on the `src` property."},he={name:"AstroGlobUsedOutside",title:"Astro.glob() used outside of an Astro file.",message:e=>`\`Astro.glob(${e})\` can only be used in \`.astro\` files. \`import.meta.glob(${e})\` can be used instead to achieve a similar result.`,hint:"See Vite's documentation on `import.meta.glob` for more information: https://vitejs.dev/guide/features.html#glob-import"},ge={name:"AstroGlobNoMatch",title:"Astro.glob() did not match any files.",message:e=>`\`Astro.glob(${e})\` did not return any matching files.`,hint:"Check the pattern for typos."},O={name:"MissingSharp",title:"Could not find Sharp.",message:"Could not find Sharp. Please install Sharp (`sharp`) manually into your project or migrate to another image service.",hint:"See Sharp's installation instructions for more information: https://sharp.pixelplumbing.com/install. If you are not relying on `astro:assets` to optimize, transform, or process any images, you can configure a passthrough image service instead of installing Sharp. See https://docs.astro.build/en/reference/errors/missing-sharp for more information.\n\nSee https://docs.astro.build/en/guides/images/#default-image-service for more information on how to migrate to another image service."},fe={name:"UnknownContentCollectionError",title:"Unknown Content Collection Error."};function _(e){return e.replace(/\r\n|\r(?!\n)|\n/g,"\n")}function F(e,t){if(!t||void 0===t.line||void 0===t.column)return"";const i=_(e).split("\n").map((e=>e.replace(/\t/g,"  "))),r=[];for(let e=-2;e<=2;e++)i[t.line+e]&&r.push(t.line+e);let n=0;for(const e of r){let t=`> ${e}`;t.length>n&&(n=t.length)}let o="";for(const e of r){const r=e===t.line-1;o+=r?"> ":"  ",o+=`${e+1} | ${i[e]}\n`,r&&(o+=`${Array.from({length:n}).join(" ")}  | ${Array.from({length:t.column}).join(" ")}^\n`)}return o}class g extends Error{loc;title;hint;frame;type="AstroError";constructor(e,t){const{name:i,title:r,message:n,stack:o,location:s,hint:a,frame:m}=e;super(n,t),this.title=r,this.name=i,n&&(this.message=n),this.stack=o||this.stack,this.loc=s,this.hint=a,this.frame=m}setLocation(e){this.loc=e}setName(e){this.name=e}setMessage(e){this.message=e}setHint(e){this.hint=e}setFrame(e,t){this.frame=F(e,t)}static is(e){return"AstroError"===e.type}}function ue(e){return"/"===e[0]?e:"/"+e}function j(e){return e.endsWith("/")?e.slice(0,e.length-1):e}function q(e){return e.startsWith("/")?e.substring(1):e}function k(e){return e.replace(/^\/|\/$/g,"")}function D(e){return"string"==typeof e||e instanceof String}function H(...e){return e.filter(D).map(((t,i)=>0===i?j(t):i===e.length-1?q(t):k(t))).join("/")}function W(e){return/^(?:http|ftp|https|ws):?\/\//.test(e)||e.startsWith("data:")}const M=["jpeg","jpg","png","tiff","webp","gif","svg","avif"],E="webp",z=["src","width","height","format","quality"];function p(e){return"object"==typeof e}function pe(e){return"string"==typeof e}async function ye(e){return"object"==typeof e&&"then"in e?(await e).default??await e:e}function G(e,t){return Q(e,t.protocol)&&C(e,t.hostname,!0)&&V(e,t.port)&&B(e,t.pathname)}function V(e,t){return!t||t===e.port}function Q(e,t){return!t||t===e.protocol.slice(0,-1)}function C(e,t,i){if(!t)return!0;if(!i||!t.startsWith("*"))return t===e.hostname;if(t.startsWith("**.")){const i=t.slice(2);return i!==e.hostname&&e.hostname.endsWith(i)}if(t.startsWith("*.")){const i=t.slice(1);return 1===e.hostname.replace(i,"").split(".").filter(Boolean).length}return!1}function B(e,t,i){if(!t)return!0;if(!t.endsWith("*"))return t===e.pathname;if(t.endsWith("/**")){const i=t.slice(0,-2);return i!==e.pathname&&e.pathname.startsWith(i)}if(t.endsWith("/*")){const i=t.slice(0,-1);return 1===e.pathname.replace(i,"").split("/").filter(Boolean).length}return!1}function J(e,{domains:t=[],remotePatterns:i=[]}){if(!W(e))return!1;const r=new URL(e);return t.some((e=>C(r,e)))||i.some((e=>G(r,e)))}function we(e){return!!e&&"transform"in e}function Y(e){let t=parseInt(e);return Number.isNaN(t)?e:t}const u={propertiesToHash:z,validateOptions(e){if(!e.src||"string"!=typeof e.src&&"object"!=typeof e.src)throw new g({...S,message:S.message(JSON.stringify(e.src),typeof e.src,JSON.stringify(e,((e,t)=>void 0===t?null:t)))});if(p(e.src)){if(!M.includes(e.src.format))throw new g({...I,message:I.message(e.src.format,e.src.src,M)});if(e.widths&&e.densities)throw new g(P);if("svg"===e.src.format&&(e.format="svg"),"svg"===e.src.format&&"svg"!==e.format||"svg"!==e.src.format&&"svg"===e.format)throw new g(T)}else{if(e.src.startsWith("/@fs/")||!W(e.src)&&!e.src.startsWith("/"))throw new g({...$,message:$.message(e.src)});let t;if(e.width||e.height?!e.width&&e.height?t="width":e.width&&!e.height&&(t="height"):t="both",t)throw new g({...v,message:v.message(t,e.src)})}return e.format||(e.format=E),e.width&&(e.width=Math.round(e.width)),e.height&&(e.height=Math.round(e.height)),e},getHTMLAttributes(e){const{targetWidth:t,targetHeight:i}=A(e),{src:r,width:n,height:o,format:s,quality:a,densities:m,widths:c,formats:h,...d}=e;return{...d,width:t,height:i,loading:d.loading??"lazy",decoding:d.decoding??"async"}},getSrcSet(e){const t=[],{targetWidth:i}=A(e),{widths:r,densities:n}=e,o=e.format??E;let s=e.width,a=1/0;p(e.src)&&(s=e.src.width,a=s);const{width:m,height:c,...h}=e,d=[];if(n){const e=n.map((e=>"number"==typeof e?e:parseFloat(e))),t=e.sort().map((e=>Math.round(i*e)));d.push(...t.map(((t,i)=>({maxTargetWidth:Math.min(t,a),descriptor:`${e[i]}x`}))))}else r&&d.push(...r.map((e=>({maxTargetWidth:Math.min(e,a),descriptor:`${e}w`}))));for(const{maxTargetWidth:i,descriptor:r}of d){const n={...h};i!==s?n.width=i:e.width&&e.height&&(n.width=e.width,n.height=e.height),t.push({transform:n,descriptor:r,attributes:{type:`image/${o}`}})}return t},getURL(e,t){const i=new URLSearchParams;if(p(e.src))i.append("href",e.src.src);else{if(!J(e.src,t))return e.src;i.append("href",e.src)}return Object.entries({w:"width",h:"height",q:"quality",f:"format"}).forEach((([t,r])=>{e[r]&&i.append(t,e[r].toString())})),`${H("/","/_image")}?${i}`},parseURL(e){const t=e.searchParams;return t.has("href")?{src:t.get("href"),width:t.has("w")?parseInt(t.get("w")):void 0,height:t.has("h")?parseInt(t.get("h")):void 0,format:t.get("f"),quality:t.get("q")}:void 0}};function A(e){let t=e.width,i=e.height;if(p(e.src)){const r=e.src.width/e.src.height;i&&!t?t=Math.round(i*r):t&&!i?i=Math.round(t/r):!t&&!i&&(t=e.src.width,i=e.src.height)}return{targetWidth:t,targetHeight:i}}let w;const U={low:25,mid:50,high:80,max:100};async function K(){let e;try{e=(await R((async()=>{const{default:e}=await import("../index.ChiczSqJ.js").then((e=>e.i));return{default:e}}),__vite__mapDeps([0,1]))).default}catch{throw new g(O)}return e.cache(!1),e}const X={validateOptions:u.validateOptions,getURL:u.getURL,parseURL:u.parseURL,getHTMLAttributes:u.getHTMLAttributes,getSrcSet:u.getSrcSet,async transform(e,t,i){w||(w=await K());const r=t;if("svg"===r.format)return{data:e,format:"svg"};const n=w(e,{failOnError:!1,pages:-1,limitInputPixels:i.service.config.limitInputPixels});if(n.rotate(),r.height&&!r.width?n.resize({height:Math.round(r.height)}):r.width&&n.resize({width:Math.round(r.width)}),r.format){let e;if(r.quality){const t=Y(r.quality);e="number"==typeof t?t:r.quality in U?U[r.quality]:void 0}n.toFormat(r.format,{quality:e})}const{data:o,info:s}=await n.toBuffer({resolveWithObject:!0});return{data:o,format:s.format}}};var Z=X;const be=Object.freeze(Object.defineProperty({__proto__:null,default:Z},Symbol.toStringTag,{value:"Module"}));export{g as A,z as D,me as E,ce as F,oe as I,ee as M,de as N,fe as U,R as _,he as a,ge as b,S as c,le as d,p as e,we as f,ae as g,se as h,pe as i,ne as j,te as k,ie as l,re as m,ue as p,ye as r,be as s};